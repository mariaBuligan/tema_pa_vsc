Requirement 1:
I read the number of players, the team name, and the information of all players.
Using the 'AddAtBeginning' function, I added each team to the beginning of the list 'p' individually.

Requirement 2:
The 'teams_to_be_eliminated' function calculates the difference between the number of teams and the nearest power of 2.
The 'minimum_score' function calculates the lowest score from the entire list of teams, and then the 'remove_from_list' function removes the first team found with that score.
This process repeats until the required number of teams have been eliminated.

Requirement 3:
The 'top8' variable will store the last 8 remaining teams in a list.
Using 'enQueue', all teams from list 'p' are placed into queue 'q'.
The last 8 teams are all teams from the queue remaining in the second-to-last round, so the first 'if' checks if we are in that round, if yes, all teams will be added to the 'top8' list.
After each match, the winning teams are added to the 'winners_stack' stack and the losing teams to the 'losers_stack'.
After each round, the winners are displayed using the 'stack_display' function.
Then, until the 'winners_stack' is empty, the teams are added back to the queue, and the 'losers_stack' is recursively cleared using the 'recursive_deletion' function.

Requirement 4:
The BST tree has 'root' as its root.
The list is traversed and each team is added to the tree using the 'insert' function.
Displaying the last 8 teams in order is done by displaying the tree from right to left, i.e., RDL, using the 'display_RDL' function.

Requirement 5:
The 'make_sorted_top8' function traverses the BST tree as in requirement 4 and saves the teams in order in another list called 'sorted8'.
Thus, the 'sorted8' list represents the top 8 teams, but in order.
The 'make_AVL' function will take the middle of the sorted list and set it as the root; everything before the middle will be the right part of the tree, and everything after the middle will be the left part of the tree.
The 'display_at_level' function displays a specific level of a tree, in this case, level 2.
