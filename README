Cerinta 1:
-am citit nr de jucatori, numele echipei, si informatiile tuturor jucatorilor
-cu functia 'AddAtBeggining' am adaugat la inceputul listei 'p' fiecare echipa in parte;

Cerinta 2:
-functia 'cate_echipe_trebuie_eliminate' calculeaza diferenta dintre nr de echipe si cea mai apropiata putere a lui 2
-functia 'scor_minim' calculeaza scorul cel mai mic din toata lista de echipe, iar mai apoi functia 'sters_din_lista' elimina prim echipa gasita cu respectivul scor
-acest lucru se repeta pana cand s-a ajuns la nr de echipe care trebuia eliminat

Cerinta 3:
-variabila 'top8' va retine ultimele 8 echipe ramase intr-o lista
-cu 'enQueue' se pun toate echipele din lista p in coada q
-ultimele 8 echipe sunt toate echipele din coada ramase in pen-pen-ultima runda, asa ca primul if verifica daca suntem in aceea runda, daca da, at echipele se vor adauga in lista 'top8'
-dupa fiecare meci, sunt adaugate in stiva de castigatori 's_castigatori' si in stiva de invinsi 's_invinsi' echipele
-dupa fiecare runda se afiseaza castigatorii cu functia 'stack_dispaly'
-dupa aceea pana la golirea stivei de castigatori, se adauga inapoi in coada echipele, iar stiva de invinsi se sterge recursiv cu functia 'stergere_recursiva'

Cerinta 4:
-arborele BST are ca radacina 'root'
-se parcurge lista si se adauga in arbore fiecare echipa prin functia 'insert'
-afisarea in ordine a ultimelor 8 echipe se face prin afisarea arborelui de la dreapta la stanga adica DRS, prin functia 'afisare_DRS'

Cerinta 5:
-functia  'make_sortat_top8' parcurge arborele BST ca si la cerinta 4 si salveaza echipele in ordine in alta lista numita 'sortat8'
-astfel lista sortat8 este lista top8, dar ordonata
-functia 'make_AVL' va lua mijlocul listei sortate si il va pune ca radacina, tot ce e inainte de mijloc va fi partea dreapta a arborelui, iar tot ce e dupa mijloc va fi partea stanga a arborelui
-functia 'afisare_pe_nivel' afiseaza un anumit nivel al unui arbore, in cazul acesta, nivelul 2 